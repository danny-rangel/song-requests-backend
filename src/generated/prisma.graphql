# source: http://localhost:4466/stream-requests/dev
# timestamp: Mon Aug 12 2019 21:03:33 GMT-0700 (Pacific Daylight Time)

type AggregateBroadcaster {
  count: Int!
}

type AggregateQueueSong {
  count: Int!
}

type AggregateSong {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Broadcaster implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isMod: Boolean!
  songCount: Int!
  songs(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song!]
  queue(where: QueueSongWhereInput, orderBy: QueueSongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QueueSong!]
}

"""A connection to a list of items."""
type BroadcasterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BroadcasterEdge]!
  aggregate: AggregateBroadcaster!
}

input BroadcasterCreateInput {
  id: ID
  isMod: Boolean
  songCount: Int
  songs: SongCreateManyWithoutBroadcasterInput
  queue: QueueSongCreateManyWithoutBroadcasterInput
}

input BroadcasterCreateOneWithoutQueueInput {
  create: BroadcasterCreateWithoutQueueInput
  connect: BroadcasterWhereUniqueInput
}

input BroadcasterCreateOneWithoutSongsInput {
  create: BroadcasterCreateWithoutSongsInput
  connect: BroadcasterWhereUniqueInput
}

input BroadcasterCreateWithoutQueueInput {
  id: ID
  isMod: Boolean
  songCount: Int
  songs: SongCreateManyWithoutBroadcasterInput
}

input BroadcasterCreateWithoutSongsInput {
  id: ID
  isMod: Boolean
  songCount: Int
  queue: QueueSongCreateManyWithoutBroadcasterInput
}

"""An edge in a connection."""
type BroadcasterEdge {
  """The item at the end of the edge."""
  node: Broadcaster!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BroadcasterOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isMod_ASC
  isMod_DESC
  songCount_ASC
  songCount_DESC
}

type BroadcasterPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isMod: Boolean!
  songCount: Int!
}

type BroadcasterSubscriptionPayload {
  mutation: MutationType!
  node: Broadcaster
  updatedFields: [String!]
  previousValues: BroadcasterPreviousValues
}

input BroadcasterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BroadcasterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BroadcasterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BroadcasterSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BroadcasterWhereInput
}

input BroadcasterUpdateInput {
  isMod: Boolean
  songCount: Int
  songs: SongUpdateManyWithoutBroadcasterInput
  queue: QueueSongUpdateManyWithoutBroadcasterInput
}

input BroadcasterUpdateManyMutationInput {
  isMod: Boolean
  songCount: Int
}

input BroadcasterUpdateOneRequiredWithoutQueueInput {
  create: BroadcasterCreateWithoutQueueInput
  connect: BroadcasterWhereUniqueInput
  update: BroadcasterUpdateWithoutQueueDataInput
  upsert: BroadcasterUpsertWithoutQueueInput
}

input BroadcasterUpdateOneRequiredWithoutSongsInput {
  create: BroadcasterCreateWithoutSongsInput
  connect: BroadcasterWhereUniqueInput
  update: BroadcasterUpdateWithoutSongsDataInput
  upsert: BroadcasterUpsertWithoutSongsInput
}

input BroadcasterUpdateWithoutQueueDataInput {
  isMod: Boolean
  songCount: Int
  songs: SongUpdateManyWithoutBroadcasterInput
}

input BroadcasterUpdateWithoutSongsDataInput {
  isMod: Boolean
  songCount: Int
  queue: QueueSongUpdateManyWithoutBroadcasterInput
}

input BroadcasterUpsertWithoutQueueInput {
  update: BroadcasterUpdateWithoutQueueDataInput!
  create: BroadcasterCreateWithoutQueueInput!
}

input BroadcasterUpsertWithoutSongsInput {
  update: BroadcasterUpdateWithoutSongsDataInput!
  create: BroadcasterCreateWithoutSongsInput!
}

input BroadcasterWhereInput {
  """Logical AND on all given filters."""
  AND: [BroadcasterWhereInput!]

  """Logical OR on all given filters."""
  OR: [BroadcasterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BroadcasterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  isMod: Boolean

  """All values that are not equal to given value."""
  isMod_not: Boolean
  songCount: Int

  """All values that are not equal to given value."""
  songCount_not: Int

  """All values that are contained in given list."""
  songCount_in: [Int!]

  """All values that are not contained in given list."""
  songCount_not_in: [Int!]

  """All values less than the given value."""
  songCount_lt: Int

  """All values less than or equal the given value."""
  songCount_lte: Int

  """All values greater than the given value."""
  songCount_gt: Int

  """All values greater than or equal the given value."""
  songCount_gte: Int
  songs_every: SongWhereInput
  songs_some: SongWhereInput
  songs_none: SongWhereInput
  queue_every: QueueSongWhereInput
  queue_some: QueueSongWhereInput
  queue_none: QueueSongWhereInput
}

input BroadcasterWhereUniqueInput {
  id: ID
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBroadcaster(data: BroadcasterCreateInput!): Broadcaster!
  createSong(data: SongCreateInput!): Song!
  createQueueSong(data: QueueSongCreateInput!): QueueSong!
  createUser(data: UserCreateInput!): User!
  updateBroadcaster(data: BroadcasterUpdateInput!, where: BroadcasterWhereUniqueInput!): Broadcaster
  updateSong(data: SongUpdateInput!, where: SongWhereUniqueInput!): Song
  updateQueueSong(data: QueueSongUpdateInput!, where: QueueSongWhereUniqueInput!): QueueSong
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteBroadcaster(where: BroadcasterWhereUniqueInput!): Broadcaster
  deleteSong(where: SongWhereUniqueInput!): Song
  deleteQueueSong(where: QueueSongWhereUniqueInput!): QueueSong
  deleteUser(where: UserWhereUniqueInput!): User
  upsertBroadcaster(where: BroadcasterWhereUniqueInput!, create: BroadcasterCreateInput!, update: BroadcasterUpdateInput!): Broadcaster!
  upsertSong(where: SongWhereUniqueInput!, create: SongCreateInput!, update: SongUpdateInput!): Song!
  upsertQueueSong(where: QueueSongWhereUniqueInput!, create: QueueSongCreateInput!, update: QueueSongUpdateInput!): QueueSong!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyBroadcasters(data: BroadcasterUpdateManyMutationInput!, where: BroadcasterWhereInput): BatchPayload!
  updateManySongs(data: SongUpdateManyMutationInput!, where: SongWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyBroadcasters(where: BroadcasterWhereInput): BatchPayload!
  deleteManySongs(where: SongWhereInput): BatchPayload!
  deleteManyQueueSongs(where: QueueSongWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  broadcasters(where: BroadcasterWhereInput, orderBy: BroadcasterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Broadcaster]!
  songs(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song]!
  queueSongs(where: QueueSongWhereInput, orderBy: QueueSongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QueueSong]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  broadcaster(where: BroadcasterWhereUniqueInput!): Broadcaster
  song(where: SongWhereUniqueInput!): Song
  queueSong(where: QueueSongWhereUniqueInput!): QueueSong
  user(where: UserWhereUniqueInput!): User
  broadcastersConnection(where: BroadcasterWhereInput, orderBy: BroadcasterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BroadcasterConnection!
  songsConnection(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SongConnection!
  queueSongsConnection(where: QueueSongWhereInput, orderBy: QueueSongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QueueSongConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type QueueSong implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  broadcaster: Broadcaster!
  song: Song!
}

"""A connection to a list of items."""
type QueueSongConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QueueSongEdge]!
  aggregate: AggregateQueueSong!
}

input QueueSongCreateInput {
  id: ID
  broadcaster: BroadcasterCreateOneWithoutQueueInput!
  song: SongCreateOneWithoutQueueInput!
}

input QueueSongCreateManyWithoutBroadcasterInput {
  create: [QueueSongCreateWithoutBroadcasterInput!]
  connect: [QueueSongWhereUniqueInput!]
}

input QueueSongCreateOneWithoutSongInput {
  create: QueueSongCreateWithoutSongInput
  connect: QueueSongWhereUniqueInput
}

input QueueSongCreateWithoutBroadcasterInput {
  id: ID
  song: SongCreateOneWithoutQueueInput!
}

input QueueSongCreateWithoutSongInput {
  id: ID
  broadcaster: BroadcasterCreateOneWithoutQueueInput!
}

"""An edge in a connection."""
type QueueSongEdge {
  """The item at the end of the edge."""
  node: QueueSong!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QueueSongOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QueueSongPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input QueueSongScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QueueSongScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QueueSongScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QueueSongScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type QueueSongSubscriptionPayload {
  mutation: MutationType!
  node: QueueSong
  updatedFields: [String!]
  previousValues: QueueSongPreviousValues
}

input QueueSongSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QueueSongSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QueueSongSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QueueSongSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QueueSongWhereInput
}

input QueueSongUpdateInput {
  broadcaster: BroadcasterUpdateOneRequiredWithoutQueueInput
  song: SongUpdateOneRequiredWithoutQueueInput
}

input QueueSongUpdateManyWithoutBroadcasterInput {
  create: [QueueSongCreateWithoutBroadcasterInput!]
  connect: [QueueSongWhereUniqueInput!]
  set: [QueueSongWhereUniqueInput!]
  disconnect: [QueueSongWhereUniqueInput!]
  delete: [QueueSongWhereUniqueInput!]
  update: [QueueSongUpdateWithWhereUniqueWithoutBroadcasterInput!]
  deleteMany: [QueueSongScalarWhereInput!]
  upsert: [QueueSongUpsertWithWhereUniqueWithoutBroadcasterInput!]
}

input QueueSongUpdateOneWithoutSongInput {
  create: QueueSongCreateWithoutSongInput
  connect: QueueSongWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: QueueSongUpdateWithoutSongDataInput
  upsert: QueueSongUpsertWithoutSongInput
}

input QueueSongUpdateWithoutBroadcasterDataInput {
  song: SongUpdateOneRequiredWithoutQueueInput
}

input QueueSongUpdateWithoutSongDataInput {
  broadcaster: BroadcasterUpdateOneRequiredWithoutQueueInput
}

input QueueSongUpdateWithWhereUniqueWithoutBroadcasterInput {
  where: QueueSongWhereUniqueInput!
  data: QueueSongUpdateWithoutBroadcasterDataInput!
}

input QueueSongUpsertWithoutSongInput {
  update: QueueSongUpdateWithoutSongDataInput!
  create: QueueSongCreateWithoutSongInput!
}

input QueueSongUpsertWithWhereUniqueWithoutBroadcasterInput {
  where: QueueSongWhereUniqueInput!
  update: QueueSongUpdateWithoutBroadcasterDataInput!
  create: QueueSongCreateWithoutBroadcasterInput!
}

input QueueSongWhereInput {
  """Logical AND on all given filters."""
  AND: [QueueSongWhereInput!]

  """Logical OR on all given filters."""
  OR: [QueueSongWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QueueSongWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  broadcaster: BroadcasterWhereInput
  song: SongWhereInput
}

input QueueSongWhereUniqueInput {
  id: ID
}

type Song implements Node {
  id: ID!
  title: String!
  artist: String!
  requestedAmount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  broadcaster: Broadcaster!
  queue: QueueSong
}

"""A connection to a list of items."""
type SongConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SongEdge]!
  aggregate: AggregateSong!
}

input SongCreateInput {
  id: ID
  title: String!
  artist: String!
  requestedAmount: Int
  broadcaster: BroadcasterCreateOneWithoutSongsInput!
  queue: QueueSongCreateOneWithoutSongInput
}

input SongCreateManyWithoutBroadcasterInput {
  create: [SongCreateWithoutBroadcasterInput!]
  connect: [SongWhereUniqueInput!]
}

input SongCreateOneWithoutQueueInput {
  create: SongCreateWithoutQueueInput
  connect: SongWhereUniqueInput
}

input SongCreateWithoutBroadcasterInput {
  id: ID
  title: String!
  artist: String!
  requestedAmount: Int
  queue: QueueSongCreateOneWithoutSongInput
}

input SongCreateWithoutQueueInput {
  id: ID
  title: String!
  artist: String!
  requestedAmount: Int
  broadcaster: BroadcasterCreateOneWithoutSongsInput!
}

"""An edge in a connection."""
type SongEdge {
  """The item at the end of the edge."""
  node: Song!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SongOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  artist_ASC
  artist_DESC
  requestedAmount_ASC
  requestedAmount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SongPreviousValues {
  id: ID!
  title: String!
  artist: String!
  requestedAmount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SongScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SongScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SongScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SongScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  artist: String

  """All values that are not equal to given value."""
  artist_not: String

  """All values that are contained in given list."""
  artist_in: [String!]

  """All values that are not contained in given list."""
  artist_not_in: [String!]

  """All values less than the given value."""
  artist_lt: String

  """All values less than or equal the given value."""
  artist_lte: String

  """All values greater than the given value."""
  artist_gt: String

  """All values greater than or equal the given value."""
  artist_gte: String

  """All values containing the given string."""
  artist_contains: String

  """All values not containing the given string."""
  artist_not_contains: String

  """All values starting with the given string."""
  artist_starts_with: String

  """All values not starting with the given string."""
  artist_not_starts_with: String

  """All values ending with the given string."""
  artist_ends_with: String

  """All values not ending with the given string."""
  artist_not_ends_with: String
  requestedAmount: Int

  """All values that are not equal to given value."""
  requestedAmount_not: Int

  """All values that are contained in given list."""
  requestedAmount_in: [Int!]

  """All values that are not contained in given list."""
  requestedAmount_not_in: [Int!]

  """All values less than the given value."""
  requestedAmount_lt: Int

  """All values less than or equal the given value."""
  requestedAmount_lte: Int

  """All values greater than the given value."""
  requestedAmount_gt: Int

  """All values greater than or equal the given value."""
  requestedAmount_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SongSubscriptionPayload {
  mutation: MutationType!
  node: Song
  updatedFields: [String!]
  previousValues: SongPreviousValues
}

input SongSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SongSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SongSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SongSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SongWhereInput
}

input SongUpdateInput {
  title: String
  artist: String
  requestedAmount: Int
  broadcaster: BroadcasterUpdateOneRequiredWithoutSongsInput
  queue: QueueSongUpdateOneWithoutSongInput
}

input SongUpdateManyDataInput {
  title: String
  artist: String
  requestedAmount: Int
}

input SongUpdateManyMutationInput {
  title: String
  artist: String
  requestedAmount: Int
}

input SongUpdateManyWithoutBroadcasterInput {
  create: [SongCreateWithoutBroadcasterInput!]
  connect: [SongWhereUniqueInput!]
  set: [SongWhereUniqueInput!]
  disconnect: [SongWhereUniqueInput!]
  delete: [SongWhereUniqueInput!]
  update: [SongUpdateWithWhereUniqueWithoutBroadcasterInput!]
  updateMany: [SongUpdateManyWithWhereNestedInput!]
  deleteMany: [SongScalarWhereInput!]
  upsert: [SongUpsertWithWhereUniqueWithoutBroadcasterInput!]
}

input SongUpdateManyWithWhereNestedInput {
  where: SongScalarWhereInput!
  data: SongUpdateManyDataInput!
}

input SongUpdateOneRequiredWithoutQueueInput {
  create: SongCreateWithoutQueueInput
  connect: SongWhereUniqueInput
  update: SongUpdateWithoutQueueDataInput
  upsert: SongUpsertWithoutQueueInput
}

input SongUpdateWithoutBroadcasterDataInput {
  title: String
  artist: String
  requestedAmount: Int
  queue: QueueSongUpdateOneWithoutSongInput
}

input SongUpdateWithoutQueueDataInput {
  title: String
  artist: String
  requestedAmount: Int
  broadcaster: BroadcasterUpdateOneRequiredWithoutSongsInput
}

input SongUpdateWithWhereUniqueWithoutBroadcasterInput {
  where: SongWhereUniqueInput!
  data: SongUpdateWithoutBroadcasterDataInput!
}

input SongUpsertWithoutQueueInput {
  update: SongUpdateWithoutQueueDataInput!
  create: SongCreateWithoutQueueInput!
}

input SongUpsertWithWhereUniqueWithoutBroadcasterInput {
  where: SongWhereUniqueInput!
  update: SongUpdateWithoutBroadcasterDataInput!
  create: SongCreateWithoutBroadcasterInput!
}

input SongWhereInput {
  """Logical AND on all given filters."""
  AND: [SongWhereInput!]

  """Logical OR on all given filters."""
  OR: [SongWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SongWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  artist: String

  """All values that are not equal to given value."""
  artist_not: String

  """All values that are contained in given list."""
  artist_in: [String!]

  """All values that are not contained in given list."""
  artist_not_in: [String!]

  """All values less than the given value."""
  artist_lt: String

  """All values less than or equal the given value."""
  artist_lte: String

  """All values greater than the given value."""
  artist_gt: String

  """All values greater than or equal the given value."""
  artist_gte: String

  """All values containing the given string."""
  artist_contains: String

  """All values not containing the given string."""
  artist_not_contains: String

  """All values starting with the given string."""
  artist_starts_with: String

  """All values not starting with the given string."""
  artist_not_starts_with: String

  """All values ending with the given string."""
  artist_ends_with: String

  """All values not ending with the given string."""
  artist_not_ends_with: String
  requestedAmount: Int

  """All values that are not equal to given value."""
  requestedAmount_not: Int

  """All values that are contained in given list."""
  requestedAmount_in: [Int!]

  """All values that are not contained in given list."""
  requestedAmount_not_in: [Int!]

  """All values less than the given value."""
  requestedAmount_lt: Int

  """All values less than or equal the given value."""
  requestedAmount_lte: Int

  """All values greater than the given value."""
  requestedAmount_gt: Int

  """All values greater than or equal the given value."""
  requestedAmount_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  broadcaster: BroadcasterWhereInput
  queue: QueueSongWhereInput
}

input SongWhereUniqueInput {
  id: ID
}

type Subscription {
  broadcaster(where: BroadcasterSubscriptionWhereInput): BroadcasterSubscriptionPayload
  song(where: SongSubscriptionWhereInput): SongSubscriptionPayload
  queueSong(where: QueueSongSubscriptionWhereInput): QueueSongSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  userId: String
  isMod: Boolean!
  hasSharedId: Boolean!
  role: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  userId: String
  isMod: Boolean
  hasSharedId: Boolean
  role: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  isMod_ASC
  isMod_DESC
  hasSharedId_ASC
  hasSharedId_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  userId: String
  isMod: Boolean!
  hasSharedId: Boolean!
  role: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  userId: String
  isMod: Boolean
  hasSharedId: Boolean
  role: String
}

input UserUpdateManyMutationInput {
  userId: String
  isMod: Boolean
  hasSharedId: Boolean
  role: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  userId: String

  """All values that are not equal to given value."""
  userId_not: String

  """All values that are contained in given list."""
  userId_in: [String!]

  """All values that are not contained in given list."""
  userId_not_in: [String!]

  """All values less than the given value."""
  userId_lt: String

  """All values less than or equal the given value."""
  userId_lte: String

  """All values greater than the given value."""
  userId_gt: String

  """All values greater than or equal the given value."""
  userId_gte: String

  """All values containing the given string."""
  userId_contains: String

  """All values not containing the given string."""
  userId_not_contains: String

  """All values starting with the given string."""
  userId_starts_with: String

  """All values not starting with the given string."""
  userId_not_starts_with: String

  """All values ending with the given string."""
  userId_ends_with: String

  """All values not ending with the given string."""
  userId_not_ends_with: String
  isMod: Boolean

  """All values that are not equal to given value."""
  isMod_not: Boolean
  hasSharedId: Boolean

  """All values that are not equal to given value."""
  hasSharedId_not: Boolean
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String!]

  """All values that are not contained in given list."""
  role_not_in: [String!]

  """All values less than the given value."""
  role_lt: String

  """All values less than or equal the given value."""
  role_lte: String

  """All values greater than the given value."""
  role_gt: String

  """All values greater than or equal the given value."""
  role_gte: String

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string."""
  role_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
}
