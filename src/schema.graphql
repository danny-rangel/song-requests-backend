# import SongOrderByInput from './generated/prisma.graphql'

type Query {
    broadcaster(id: ID!): Broadcaster!
    songs(
        query: String
        first: Int
        skip: Int
        orderBy: SongOrderByInput
    ): [Song!]!
    me: AuthPayload!
}

type Mutation {
    deleteBroadcaster: Broadcaster!
    createSong(data: CreateSongInput!): Song!
    addSongToQueue(songId: String!): QueueSong!
    deleteAllSongsInQueue: BatchPayload!
    deleteSongInQueue(queueId: String!): QueueSong!
    deleteSong(songId: String!): Broadcaster!
    updateSong(data: UpdateSongInput!): Broadcaster!
}

# type Subscription {
# }

type AuthPayload {
    token: String!
    broadcaster: Broadcaster
    user: User
    channelId: String!
}

type BatchPayload {
    count: Long!
}

input CreateSongInput {
    title: String!
    artist: String!
}

input UpdateSongInput {
    songId: String!
    title: String
    artist: String
}

type Broadcaster {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    isMod: Boolean!
    songs: [Song!]
    queue: [QueueSong!]
}

type User {
    id: ID!
    userId: String
    isMod: Boolean!
    hasSharedId: Boolean!
    role: String!
    opaqueUserId: String!
}

type Song {
    id: ID!
    title: String!
    artist: String!
    requestedAmount: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
    broadcaster: Broadcaster!
}

type QueueSong {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    broadcaster: Broadcaster!
    song: Song!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}
