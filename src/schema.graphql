# import UserOrderByInput from './generated/prisma.graphql'

type Query {
    users(
        query: String
        first: Int
        skip: Int
        after: String
        orderBy: UserOrderByInput
    ): [User!]!
    me: User!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    createSong(data: CreateSongInput!): Song!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
}

type Subscription {
    queue(userId: ID!): Queue!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input CreateSongInput {
    name: String!
    artist: String!
}

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    updatedAt: String!
    createdAt: String!
    songs: [Song!]!
    queue: Queue!
}

type Song {
    id: ID!
    name: String!
    artist: String!
    requestedAmount: Int!
    createdAt: DateTime!
    user: User!
}

type Queue {
    id: ID!
    songs: [Song!]!
    user: User!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type QueueSubscriptionPayload {
    mutation: MutationType!
    node: Queue
}
