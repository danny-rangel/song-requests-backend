type Broadcaster {
  id: ID! @id
  username: String!
  profileImage: String!
  queueIsClosed: Boolean! @default(value: false)
  subMode: Boolean! @default(value: false)
  oneRequestPerUser: Boolean! @default(value: true)
  bitsOnly: Boolean! @default(value: false)
  bitPriority: BitPriorityType! @default(value: NONE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  isMod: Boolean! @default(value: false)
  songCount: Int! @default(value: 0)
  songs: [Song!] @relation(name: "SongToBroadcaster", onDelete: CASCADE)
  queue: [QueueSong!] @relation(name: "QueueSongToBroadcaster", onDelete: CASCADE)
}

type Song {
  id: ID! @id
  title: String!
  artist: String!
  requestedAmount: Int! @default(value: 0)
  inQueue: Boolean! @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  broadcaster: Broadcaster! @relation(name: "SongToBroadcaster", onDelete: SET_NULL)
  queue: QueueSong @relation(name: "SongToQueue", onDelete: CASCADE)
}

type QueueSong {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  bitAmount: Int
  requestedWithBits: Boolean! @default(value: false)
  broadcaster: Broadcaster! @relation(link: INLINE, name: "QueueSongToBroadcaster", onDelete: SET_NULL)
  song: Song! @relation(link: INLINE, name: "SongToQueue", onDelete: SET_NULL)
  requestedBy: String!
}

type User {
  id: ID! @id
  userId: String
  isMod: Boolean! @default(value: false)
  hasSharedId: Boolean! @default(value: false)
  role: String!
}

type Feedback {
  id: ID! @id
  userId: String!
  username: String!
  channelId: String!
  content: String!
  createdAt: DateTime! @createdAt
}

enum BitPriorityType {
    TIME
    AMOUNT
    NONE
}